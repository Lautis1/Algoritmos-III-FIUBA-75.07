Object subclass: #Calendario	instanceVariableNames: 'invitados eventos'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!Calendario commentStamp: 'Lauti 10/12/2018 21:12' prior: 0!Representacion de la clase CalendarioResponsabilidades: -Agregar eventos, tanto simples como semanales al calendario-Agregar personas y recursos (invitados) al calendario.-Remover un evento con cierto nombre del calendario.Clase colaboradora:-clase Evento, se encarga de CREAR el evento semanal o simple.-clases herederas de Invitado: se encargan de chequear si estan ocupados en un evento en tal fecha.Variables de instancia:	eventos:		<Object>OrderedCollection	invitados:	<Object> OrderedCollection	DOCUMENTACION DE MENSAJES-agregarEventoConNombre: invitados: enAnio: mes: dia: hora:	Agrega un evento simple al calendario, con la fecha recibida y los invitados dados por la coleccion recibida.	Si alguno de esos invitados es un Recurso el cual ya esta ocupado por otro evento en esa fecha, se lanza una excepcion.	La duracion de estos eventos es de 1 hora (supuesto que tome al leer las pruebas de catedra)-agregarEventoSemanalConNombre:semanas:invitados:enAnio:mes:dia:hora:	Agrega un evento semanal al calendario, con la fecha recibida y los invitados dados por la coleccion recibida,	Si alguno de esos invitados es un Recurso el cual ya esta ocupado por otro evento en esa fecha, se lanza una excepcion.	La duracion de estos eventos es de N semanas, las cuales se reciben por parametro.	-agregarPersona:	Agrega al calendario, una persona con el nombre recibido por parametro. Si el nombre recibido es una cadena vacia, se lanza 	excepcionya que una persona no puede no tener nombre.-agregarRecurso:	Agrega al calendario, un recurso con el nombre recibido por parametro. Si el nombre recibido es una cadena vacia, se lanza 	excepcion  ya que un recurso no puede no tener nombre.	-estaOcupado:enAnio:mes:dia:hora:	-Decide si la persona o recurso recibido por parametro, ya se encuentra ocupado en otro evento.	Delega su comportamiento a la clase Invitado.	-removerEvento:	Remueve, de la coleccion de eventos del calendario, el evento con el nombre recibido por parametro. Si hay mas de un evento 	con ese nombre, cosa que es posible, los elimina todos. Delega parte de su comportamiento a la clase Invitado, ya que cada 	invitado conoce cada recurso al que fue invitado.	-existePersona: / existeRecurso:	Deciden si la persona/recurso existen en el calendario.!!Calendario methodsFor: 'initialization' stamp: 'Lauti 10/12/2018 16:24'!initialize	invitados := OrderedCollection new. "Contendra personas y recursos"	eventos := OrderedCollection new.! !!Calendario methodsFor: 'as yet unclassified' stamp: 'Lauti 10/13/2018 18:30'!agregarPersona: unNombre	self agregarInvitado: (Persona new conNombre: unNombre).! !!Calendario methodsFor: 'as yet unclassified' stamp: 'Lauti 10/13/2018 18:30'!agregarRecurso: unNombre	self agregarInvitado: (Recurso new conNombre: unNombre).! !!Calendario methodsFor: 'as yet unclassified' stamp: 'Lauti 10/12/2018 18:47'!estaOcupado: unNombre enAnio: unAnio mes: unMes dia: unDia hora: unaHora		|invitadosConNombrePedido fechaAux|		fechaAux := DateAndTime year: unAnio month: unMes day: unDia hour: unaHora minute:0 second:0.		invitadosConNombrePedido := invitados select: [ :invitado | (invitado obtenerNombre) = unNombre ].	^ (invitadosConNombrePedido anySatisfy: [ :invitado | invitado estaOcupadoEnFecha: fechaAux ]).		! !!Calendario methodsFor: 'as yet unclassified' stamp: 'Lauti 10/13/2018 18:31'!existeRecurso: unNombre	^ (invitados anySatisfy: [ :invitado | (invitado obtenerNombre) = unNombre]).! !!Calendario methodsFor: 'as yet unclassified' stamp: 'Lauti 10/13/2018 18:26'!agregarEventoConNombre: unNombre invitados: coleccion enAnio: unAnio mes: unMes dia: unDia hora: unaHora		|evento fechaAux invitadosYaPresentes|		fechaAux := DateAndTime year: unAnio month: unMes day: unDia hour: unaHora minute:0 second: 0.	evento := Evento new inicializarConNombre: unNombre conInvitados: coleccion enFecha: fechaAux.		invitadosYaPresentes := invitados select: [ :invitado | coleccion includes: (invitado obtenerNombre ) ].			invitadosYaPresentes do: [ :invitado | invitado invitarAlEvento: evento ].	eventos add: evento.	! !!Calendario methodsFor: 'as yet unclassified' stamp: 'Lauti 10/13/2018 18:31'!existePersona: unNombre	^ (invitados anySatisfy: [ :invitado | (invitado obtenerNombre) = unNombre]).! !!Calendario methodsFor: 'as yet unclassified' stamp: 'Lauti 10/13/2018 18:30'!agregarInvitado: unInvitado	invitados add: unInvitado.	! !!Calendario methodsFor: 'as yet unclassified' stamp: 'Lauti 10/13/2018 18:26'!agregarEventoSemanalConNombre: unNombre semanas: numSemanas invitados: unaColeccion enAnio: unAnio mes: unMes dia: unDia hora: unaHora		|evento fechaAux invitadosYaPresentes |		fechaAux := DateAndTime year: unAnio month: unMes day: unDia hour: unaHora minute:0 second: 0.	evento := EventoSemanal new inicializarConNombre: unNombre conInvitados: unaColeccion enFecha: fechaAux conDuracion: numSemanas.		invitadosYaPresentes := invitados select: [ :invitado | unaColeccion includes: (invitado obtenerNombre ) ].			invitadosYaPresentes do: [ :invitado | invitado invitarAlEvento: evento ].	eventos add: evento.	! !!Calendario methodsFor: 'as yet unclassified' stamp: 'Lauti 10/12/2018 20:59'!removerEvento: unNombre		(eventos anySatisfy: [ :evento | (evento obtenerNombre) = unNombre ]) ifFalse: [ (EventoInexistenteError new) signal ].		eventos removeAllSuchThat: [ :evento | (evento obtenerNombre) = unNombre ].	invitados do: [ :invitado | invitado removerEvento: unNombre ].! !Object subclass: #Evento	instanceVariableNames: 'nombre fechaInicial fechaFinal'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!Evento commentStamp: 'Lauti 10/12/2018 21:16' prior: 0!CLASE EVENTO Clase que representa a un Evento simple.Responsabilidades:-Implementa los mensajes que luego hereda su clase hija (EventoSemanal)-Se encarga de inicializarel evento y luego la clase calendario es la responsable de agregarlo.Colabora con la clase Calendario al momento de agregar eventos.Colabora con las clases herederas de la clase Invitado para hacerle saber a cada invitado a que evento esta invitado.Variables de instancia:	fechaFinal:		<Object>	fechaInicial:		<Object>	invitados:		<Object>	nombre:			<Object>				DOCUMENTACION DE MENSAJES-inicializarConNombre:conInvitados:enFecha	Inicializa un evento simple, cuya duracion es de 1 hora (supuesto tomado al leer pruebas de la catedra).	Si algun parametro es vacio, lanza la excepcion correspondiente.	Los getters devuelven el valor de los atributos de la instancia.!!Evento methodsFor: 'initialization' stamp: 'Lauti 10/12/2018 16:02'!initialize	nombre := String new.! !!Evento methodsFor: 'as yet unclassified' stamp: 'Lauti 10/13/2018 18:31'!obtenerFecha	^ fechaInicial.! !!Evento methodsFor: 'as yet unclassified' stamp: 'Lauti 10/14/2018 17:45'!inicializarConNombre: unNombre conInvitados: unaColeccion enFecha: unaFecha	(unNombre = '') ifTrue: [ (EventoSinNombreError new) signal].	(unaColeccion isEmptyOrNil ) ifTrue: [ (EventoSinInvitadosError new) signal].	(unaFecha = '') ifTrue: [ (EventoSinFechaError new) signal].		nombre := unNombre.	fechaInicial := unaFecha.	fechaFinal := fechaInicial + (Duration hours: 1).! !!Evento methodsFor: 'as yet unclassified' stamp: 'Lauti 10/13/2018 18:31'!obtenerFechaFinal	^ fechaFinal.! !!Evento methodsFor: 'as yet unclassified' stamp: 'Lauti 10/13/2018 18:31'!obtenerNombre	^ nombre.! !Error subclass: #EventoInexistenteError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!Evento subclass: #EventoSemanal	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!EventoSemanal commentStamp: 'Lauti 10/12/2018 21:19' prior: 0!CLASE EventoSemanalRepresenta un evento que dura n semanas.Responsabilidades:-Se encarga de inicializar el evento y pasarselo al calendario para que se encargue de agregarlo.-Les asigna una duracion de n semanas.Colabora con la clase Calendario al momento de agregar eventos.Variables de instancia:	Toma los valores de su clase madre, Evento.				DOCUMENTACION DE MENSAJES-inicializarConNombre:conInvitados:enFecha:conDuracion	Inicializa un evento que dura n semanas. Si algun parametro es vacio o invalido, lanza la excepcion correspondiente.Hereda el resto de los mensajes de la clase Evento.!!EventoSemanal methodsFor: 'initialization' stamp: 'Lauti 10/12/2018 17:46'!initialize	nombre := String new.	! !!EventoSemanal methodsFor: 'as yet unclassified' stamp: 'Lauti 10/14/2018 17:46'!inicializarConNombre: unNombre conInvitados: unaColeccion enFecha: unaFecha conDuracion: semanas	(unNombre = '') ifTrue: [ (EventoSinNombreError new) signal].	(unaColeccion isEmptyOrNil ) ifTrue: [ (EventoSinInvitadosError new) signal].	(unaFecha = '') ifTrue: [ (EventoSinFechaError new) signal].		nombre := unNombre.	fechaInicial := unaFecha.	fechaFinal := unaFecha + (Duration days: 7*semanas).! !Error subclass: #EventoSinFechaError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!Error subclass: #EventoSinInvitadosError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!Error subclass: #EventoSinNombreError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!Object subclass: #Invitado	instanceVariableNames: 'nombre eventosAlQueFueInvitado'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!Invitado commentStamp: 'Lauti 10/14/2018 16:19' prior: 0!Clase Abstracta InvitadoClase madre las clases Persona y Recurso .Responsabilidades:-Implementa los mensajes que luego heredan sus clases hijas (Pesona y Recurso)-Se encarga de inicializar invitados con tal nombre y de manejar los eventos a los que son invitadosColabora con la clase Evento para hacerle saber a cada invitado a que evento fue invitado.Variables de instancia:	nombre		<String>	eventosAlQueFueInvitado		<OrderedCollection>			DOCUMENTACION DE MENSAJES-conNombre:	le delega el comportamiento a cada clase hija, ya que estan implementados de distinta forma en cada clase.-estaOcupadoEnFecha:	chequea si un invitado ya esta invitado a un evento con la misma fecha que la recibida por parametro.-invitarAlEvento:	deja que cada clase implemente este mensaje de la forma mas conveniente para cada una.-removerEvento: 		recibe el nombre de un evento y lo borra de la coleccion de eventos del invitado.				!!Invitado methodsFor: 'as yet unclassified' stamp: 'Lauti 10/13/2018 18:32'!invitarAlEvento: unEvento	self subclassResponsibility.! !!Invitado methodsFor: 'as yet unclassified' stamp: 'Lauti 10/13/2018 18:32'!conNombre: unNombre	self subclassResponsibility.	! !!Invitado methodsFor: 'as yet unclassified' stamp: 'Lauti 10/13/2018 18:32'!obtenerNombre	^ nombre.! !!Invitado methodsFor: 'as yet unclassified' stamp: 'Lauti 10/12/2018 20:25'!estaOcupadoEnFecha: unaFecha		^ (eventosAlQueFueInvitado anySatisfy: [ :evento | ((evento obtenerFecha)<= unaFecha) & ((evento obtenerFechaFinal) > unaFecha)]).	! !!Invitado methodsFor: 'as yet unclassified' stamp: 'Lauti 10/13/2018 18:32'!removerEvento: unNombre	eventosAlQueFueInvitado removeAllSuchThat: [ :evento | (evento obtenerNombre) = unNombre ].! !!Invitado methodsFor: 'initialization' stamp: 'Lauti 10/12/2018 15:48'!initialize	nombre := String new.	eventosAlQueFueInvitado := OrderedCollection new.! !Invitado subclass: #Persona	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!Persona commentStamp: 'Lauti 10/14/2018 16:24' prior: 0!CLASE PersonaResponsabilidades:-Implementa los mensajes que hereda de su clase madre (Invitado)-Se encarga de inicializar invitados del tipo Persona con tal nombre y de manejar los eventos a los que son invitadosColabora con la clase Evento para hacerle saber a cada invitado a que evento fue invitado.Variables de instancia:	las mismas que en la clase madre, no hace falta inicializarlas de nuevo.			DOCUMENTACION DE MENSAJES-conNombre:	recibe un string por parametro. Si el string es vacio, lanza excepcion; sino, le pone ese nombre a la persona.-estaOcupadoEnFecha:	hereda el comportamiento de su clase madre.-invitarAlEvento:	Recibe un objeto Evento y lo agrega a su coleccion de eventos.-removerEvento: 		hereda el comportamiento de su clase madre.!!Persona methodsFor: 'as yet unclassified' stamp: 'Lauti 10/13/2018 18:32'!invitarAlEvento: unEvento	eventosAlQueFueInvitado add: unEvento.! !!Persona methodsFor: 'as yet unclassified' stamp: 'Lauti 10/13/2018 18:32'!conNombre: unNombre	(unNombre = '') ifTrue: [ (PersonaSinNombreError new) signal ].	nombre := unNombre.! !Error subclass: #PersonaSinNombreError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!Invitado subclass: #Recurso	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!Recurso commentStamp: 'Lauti 10/14/2018 16:23' prior: 0!CLASE RecursoResponsabilidades:-Implementa los mensajes que hereda de su clase madre (Invitado)-Se encarga de inicializar invitados del tipo recurso con tal nombre y de manejar los eventos a los que son invitadosColabora con la clase Evento para hacerle saber a cada invitado a que evento fue invitado.Variables de instancia:	las mismas que en la clase madre, no hace falta inicializarlas de nuevo.			DOCUMENTACION DE MENSAJES-conNombre:	recibe un string por parametro. Si el string es vacio, lanza excepcion; sino, le pone ese nombre al recurso.-estaOcupadoEnFecha:	hereda el comportamiento de su clase madre.-invitarAlEvento:	Recibe un objeto Evento. Si ese recurso ya esta ocupado en otro evento con la misma fecha, lanza excepcion.	Sino, lo agrega a su coleccion de eventos.-removerEvento: 		hereda el comportamiento de su clase madre.!!Recurso methodsFor: 'as yet unclassified' stamp: 'Lauti 10/12/2018 20:25'!invitarAlEvento: unEvento	(self estaOcupadoEnFecha: (unEvento obtenerFecha)) ifTrue: [ 		(RecursoOcupadoError new) signal ].		eventosAlQueFueInvitado add: unEvento.! !!Recurso methodsFor: 'as yet unclassified' stamp: 'Lauti 10/13/2018 18:29'!conNombre: unNombre	(unNombre = '') ifTrue: [ (RecursoSinNombreError new) signal ].	nombre := unNombre.! !Error subclass: #RecursoOcupadoError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!Error subclass: #RecursoSinNombreError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!