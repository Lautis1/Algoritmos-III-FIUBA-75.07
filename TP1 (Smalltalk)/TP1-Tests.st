TestCase subclass: #PruebasUnitariasCalendario	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!PruebasUnitariasCalendario methodsFor: 'tests' stamp: 'Lauti 10/12/2018 16:50'!test01SeAgregaUnaPersonaSinNombreYDeberiaLanzarExcepcion	|calendario|	"Arrange"	calendario := Calendario new.	"Act & Assert"	self should: [ calendario agregarPersona: '' ] raise: PersonaSinNombreError.! !!PruebasUnitariasCalendario methodsFor: 'tests' stamp: 'Lauti 10/12/2018 20:32'!test11CreaUnEventoSimpleEnUnaFechaYLoRemueveDeberiaDevolverCalendarioDesocupadoEsaFechaYOcupadoAntesDeRemover	|calendario coleccInvitados|	"Arrange"	calendario := Calendario new.	coleccInvitados := OrderedCollection with: 'Lautaro'.	"Act"	calendario agregarPersona: 'Lautaro'.	calendario agregarEventoConNombre: 'Pesca' invitados: coleccInvitados enAnio: 2018 mes: 10 dia: 5 hora: 7.	"Assert"	self assert: (calendario estaOcupado: 'Lautaro' enAnio: 2018 mes: 10 dia: 5 hora: 7).	calendario removerEvento: 'Pesca'.	self deny: (calendario estaOcupado: 'Lautaro' enAnio: 2018 mes: 10 dia: 5 hora: 7).! !!PruebasUnitariasCalendario methodsFor: 'tests' stamp: 'Lauti 10/12/2018 16:51'!test04CrearCalendarioVacioYAgregarUnRecursoImplicaQueRecursoExisteEnCalendario	|calendario|	"Arrange"	calendario := Calendario new.	"Act"	calendario agregarRecurso: 'Sillon'.	"Assert"	self assert: (calendario existeRecurso: 'Sillon').! !!PruebasUnitariasCalendario methodsFor: 'tests' stamp: 'Lauti 10/12/2018 20:02'!test09CrearEventoConRecursoEnFechaOcupadaDeberiaLanzaExcepcionDeRecursoOcupado	|calendario coleccInvitados|	"Arrange"	calendario := Calendario new.	coleccInvitados := OrderedCollection with: 'Lautaro'; with: 'TV'.	"Act"	calendario agregarPersona: 'Lautaro'.	calendario agregarRecurso: 'TV'.	calendario agregarEventoConNombre: 'Partido tenis' invitados: coleccInvitados enAnio: 2018 mes: 10 dia: 14 hora: 20.	"Assert"	self should: [ calendario agregarEventoConNombre: 'Partido rugby' invitados: coleccInvitados enAnio: 2018 mes: 10 dia: 14 hora: 20 ]	raise: RecursoOcupadoError. ! !!PruebasUnitariasCalendario methodsFor: 'tests' stamp: 'Lauti 10/12/2018 19:47'!test05SeAgregaEventoSimpleAlCalendarioYDeberiaDevolverCalendarioOcupadoEnEsaFecha	|calendario coleccInvitados|	"Arrange"	calendario := Calendario new.	coleccInvitados := OrderedCollection with: 'Lautaro'.	calendario agregarPersona: 'Lautaro'.	"Act"	calendario agregarEventoConNombre: 'Futbol' invitados: coleccInvitados enAnio: 2018 mes: 9 dia: 13 hora: 16.	"Assert"	self assert: (calendario estaOcupado: 'Lautaro' enAnio: 2018 mes: 9 dia: 13 hora: 16).! !!PruebasUnitariasCalendario methodsFor: 'tests' stamp: 'Lauti 10/12/2018 16:51'!test02SeAgregaUnRecursoSinNombreYDeberiaLanzarExcepcion		|calendario|	"Arrange"	calendario := Calendario new.	"Act & Assert"	self should: [ calendario agregarRecurso: '' ] raise: RecursoSinNombreError.! !!PruebasUnitariasCalendario methodsFor: 'tests' stamp: 'Lauti 10/12/2018 16:51'!test03AgregarUnaPersonaAlCalendarioDeberiaDevolverQueLaPersonaExisteEnElCalendario		|calendario|	"Arrange"	calendario := Calendario new.	"Act"	calendario agregarPersona: 'Lautaro'.	"Assert"	self assert: (calendario existePersona: 'Lautaro').! !!PruebasUnitariasCalendario methodsFor: 'tests' stamp: 'Lauti 10/12/2018 20:00'!test08SePuedeCrear2EventosANombreDeLaMismaPersonaEnLaMismaFechaYDeberiaDevolverOcupado	|calendario coleccInvitados|	"Arrange"	calendario := Calendario new.	coleccInvitados := OrderedCollection with: 'Lautaro'.	"Act"	calendario agregarPersona: 'Lautaro'.	calendario agregarEventoConNombre: 'Medico' invitados: coleccInvitados enAnio: 2018 mes: 10 dia: 4 hora: 13.	calendario agregarEventoConNombre: 'Cafe' invitados: coleccInvitados enAnio: 2018 mes: 10 dia: 4 hora: 13.	"Assert"	self assert: (calendario estaOcupado: 'Lautaro' enAnio: 2018 mes: 10 dia: 4 hora: 13).! !!PruebasUnitariasCalendario methodsFor: 'tests' stamp: 'Lauti 10/12/2018 19:48'!test07AlCrearEventoSemanalDe2SemanasDeberiaDevolverCalendarioOcupado2SemanasDespuesDeFechaInicial	|calendario coleccInvitados|	"Arrange"	calendario := Calendario new.	coleccInvitados := OrderedCollection with: 'Luis'.	calendario agregarPersona: 'Luis'.	"Act"	calendario agregarEventoSemanalConNombre: 'campamento' semanas: 2 invitados: coleccInvitados enAnio: 2018 mes: 5 dia: 7 hora: 9.	"Assert"	self assert: (calendario estaOcupado: 'Luis' enAnio: 2018 mes: 5 dia: 7 hora: 9).	self assert: (calendario estaOcupado: 'Luis' enAnio: 2018 mes: 5 dia: 14 hora: 9).	self deny: (calendario estaOcupado: 'Luis' enAnio: 2018 mes: 5 dia: 21 hora: 9).! !!PruebasUnitariasCalendario methodsFor: 'tests' stamp: 'Lauti 10/12/2018 20:55'!test12RemoverUnEventoInexistenteDeberiaLanzarExcepcionDeEventoInexistente	|calendario|	"Arrange"	calendario := Calendario new.	"Act & Assert"	self should: [ calendario removerEvento: 'Siesta' ] raise: EventoInexistenteError.! !!PruebasUnitariasCalendario methodsFor: 'tests' stamp: 'Lauti 10/12/2018 19:47'!test06SeAgregaEventoSimpleYDeberiaDevolverCalendarioLibreUnDiaDespuesDeLaFecha	|calendario coleccInvitados|	"Arrange"	calendario := Calendario new.	coleccInvitados := OrderedCollection with: 'Jorge'.	calendario agregarPersona: 'Jorge'.	"Act"	calendario agregarEventoConNombre: 'cine' invitados: coleccInvitados enAnio: 2018 mes: 10 dia: 13 hora: 19.	"Assert"	self deny: (calendario estaOcupado: 'Jorge' enAnio: 2018 mes: 10 dia: 14 hora: 19).! !!PruebasUnitariasCalendario methodsFor: 'tests' stamp: 'Lauti 10/12/2018 20:26'!test10CrearEventoSemanalConRecursoEnFechaOcupadaDeberiaLanzaExcepcionDeRecursoOcupado	|calendario coleccInvitados|	"Arrange"	calendario := Calendario new.	coleccInvitados := OrderedCollection with: 'Lautaro'; with: 'TV'.	"Act"	calendario agregarPersona: 'Lautaro'.	calendario agregarRecurso: 'TV'.	calendario agregarEventoConNombre: 'Partido tenis' invitados: coleccInvitados enAnio: 2018 mes: 10 dia: 14 hora: 20.	"Assert"	self should: [ calendario agregarEventoSemanalConNombre: 'Partido rugby' semanas: 2 invitados: coleccInvitados enAnio: 2018 mes: 10 dia: 14 hora:20]	raise: RecursoOcupadoError. ! !TestCase subclass: #PruebasUnitariasEvento	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!PruebasUnitariasEvento methodsFor: 'tests' stamp: 'Lauti 10/12/2018 17:53'!test02CreaEventoSinInvitadosLanzaExcepcionDeEventoSinInvitados	|evento unaFecha|	"Arrange"	evento := Evento new.	"Act & Assert"	unaFecha := DateAndTime year:2018 month:9 day:10 hour:5 minute:0 second:0.	self should: [ evento inicializarConNombre: 'Tenis' conInvitados: '' enFecha: unaFecha] raise: EventoSinInvitadosError.! !!PruebasUnitariasEvento methodsFor: 'tests' stamp: 'Lauti 10/12/2018 19:00'!test01SeCreaEventoSinNombreYDeberiaLanzarExcepcionDeEventoSinNombre	|evento invitados fecha|	"Arrange"	evento := Evento new.	invitados := OrderedCollection with: 'Lautaro'.	"Act & Assert"	fecha := DateAndTime year:2018 month:5 day:15 hour: 13 minute:0 second:0.	self should: [ evento inicializarConNombre: '' conInvitados: invitados enFecha: fecha ] raise: EventoSinNombreError.! !!PruebasUnitariasEvento methodsFor: 'tests' stamp: 'Lauti 10/12/2018 19:01'!test05SeCreaEventoSimpleConFechaYDeberiaDevolverLaFechaCorrectamente		|evento invitados fecha|	"Arrange"	evento := Evento new.	invitados := OrderedCollection with: 'Lautaro'.	"Act"	fecha := DateAndTime year: 2018 month:9 day:23 hour: 18 minute:0 second:0.	evento inicializarConNombre: 'Almuerzo' conInvitados: invitados enFecha: fecha.	"Assert"	self assert: (evento obtenerFecha) equals: fecha.! !!PruebasUnitariasEvento methodsFor: 'tests' stamp: 'Lauti 10/12/2018 19:01'!test04SeCreaEventoConNombrePartidoYDeberiaDevolverPartido	|evento unaFecha invitados|	"Arrange"	evento := Evento new.	invitados := OrderedCollection with: 'Luis'; with: 'Lautaro'.	"Act"	unaFecha := DateAndTime year:2018 month:9 day:15 hour: 10 minute:0 second:0.	evento inicializarConNombre: 'Partido' conInvitados: invitados enFecha: unaFecha.	"Assert"	self assert: (evento obtenerNombre) equals: 'Partido'.! !!PruebasUnitariasEvento methodsFor: 'tests' stamp: 'Lauti 10/12/2018 19:01'!test03SeCreaEventoSinFechaYDeberiaLanzarExcepcionDeEventoSinFecha	|evento invitados|	"Arrange"	evento := Evento new.	invitados := OrderedCollection with: 'Lucas'.	"Act & Assert"	self should: [ evento inicializarConNombre: 'Siesta' conInvitados: invitados enFecha: '' ] raise: EventoSinFechaError.! !!PruebasUnitariasEvento methodsFor: 'tests' stamp: 'Lauti 10/12/2018 21:06'!test06SeCreaEventoConDuracionYDeberiaDevolverFechaFinalEInicialDistintas	|evento invitados fecha|	"Arrange"	evento := EventoSemanal new.	invitados := OrderedCollection withAll: #('Luis' 'Lautaro' 'Sandra' 'Florencia').	"Act"	fecha := DateAndTime year: 2018 month: 10 day: 15 hour: 11 minute:0 second:0.	evento inicializarConNombre: 'Campamento' conInvitados: invitados enFecha: fecha conDuracion: 2.	"Assert"	self deny: (evento obtenerFecha = evento obtenerFechaFinal ).! !TestCase subclass: #PruebasUnitariasPersona	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!PruebasUnitariasPersona methodsFor: 'tests' stamp: 'Lauti 10/14/2018 16:30'!test03SeInvitaAUnaPersonaAlEventoCenaYDeberiaDevolverPersonaOcupadaEnEsaFecha		|persona evento invitados|	"Arrange"	invitados := OrderedCollection with: 'Lautaro'.	persona := Persona new conNombre: 'Lautaro'.	evento := Evento new inicializarConNombre: 'Cena' conInvitados: invitados  enFecha: (DateAndTime year:2018 month:5 day:10 hour: 3 minute:0 second:0).	"Act"	persona invitarAlEvento: evento.	"Assert"	self assert: (persona estaOcupadoEnFecha: (DateAndTime year:2018 month:5 day:10 hour: 3 minute:0 second:0)).		! !!PruebasUnitariasPersona methodsFor: 'tests' stamp: 'Lauti 10/12/2018 15:58'!test02SeCreaPersonaConNombreLautaroDeberiaDevolverLautaro		| persona |	"Arrange & Act"	persona := Persona new conNombre: 'Lautaro'.	"Assert"	self assert: (persona obtenerNombre) equals: 'Lautaro'.	! !!PruebasUnitariasPersona methodsFor: 'tests' stamp: 'Lauti 10/12/2018 15:46'!test01SeCreaPersonaSinNombreDeberiaLanzarExcepcionDePersonaSinNombre		|persona|	"Arrange"	persona := Persona new.	"Act & Assert"	self should: [ persona conNombre: '' ] raise: PersonaSinNombreError.	! !TestCase subclass: #PruebasUnitariasRecurso	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!PruebasUnitariasRecurso methodsFor: 'tests' stamp: 'Lauti 10/12/2018 16:00'!test01SeCreaRecursoSinNombreDeberiaDevolverErrorDeRecursoSinNombre		|recurso|	"Arrange"	recurso := Recurso new.	"Act & Assert"	self should: [ recurso conNombre: '' ] raise: RecursoSinNombreError.! !!PruebasUnitariasRecurso methodsFor: 'tests' stamp: 'Lauti 10/12/2018 16:01'!test02SeCreaRecursoLinternaDeberiaDevolverLinterna		|recurso|	"Arrange & Act"	recurso := Recurso new conNombre: 'linterna'.	"Assert"	self assert: (recurso obtenerNombre ) equals: 'linterna'.! !!PruebasUnitariasRecurso methodsFor: 'tests' stamp: 'Lauti 10/14/2018 16:32'!test03SeInvitaAUnRecursoAUnEventoYDeberiaDevolverRecursoOcupadaEnEsaFecha		|recurso evento invitados|	"Arrange"	invitados := OrderedCollection with: 'Lautaro'; with: 'Television'.	recurso := Recurso new conNombre: 'Television'.	evento := Evento new inicializarConNombre: 'Cena' conInvitados: invitados  enFecha: (DateAndTime year:2018 month:5 day:10 hour: 3 minute:0 second:0).	"Act"	recurso invitarAlEvento: evento.	"Assert"	self assert: (recurso estaOcupadoEnFecha: (DateAndTime year:2018 month:5 day:10 hour: 3 minute:0 second:0)).! !