TestCase subclass: #TestMotoDeCarrera	instanceVariableNames: ''	classVariableNames: ''	package: 'ParcialAlgo3Tests'!!TestMotoDeCarrera methodsFor: 'tests' stamp: '100901 6/30/2020 19:58'!test01MotoDeCarreraAvanza720kmEn3Hs	| moto resultado|	"Arrange"	moto := VehiculoTerrestre crearMotoDeCarrera.		"Act"	resultado := moto cantidadKmAlAvanzarHoras: 3.		"Assert"	self assert: resultado equals: 720.! !!TestMotoDeCarrera methodsFor: 'tests' stamp: '100901 6/30/2020 19:59'!test02MotoCarreraSeRompeDeberiaLanzarExcepcionDeVehiculoAveriadoNoAvanzaAlQuererAvanzar	|moto|	"Arrange"	moto := VehiculoTerrestre crearMotoDeCarrera.		"Act"	moto romperVehiculo.		"Assert"	self should: [ moto cantidadKmAlAvanzarHoras: 2 ] raise: VehiculoAveriadoNoPuedeAvanzarError.! !TestCase subclass: #TestMotoneta	instanceVariableNames: ''	classVariableNames: ''	package: 'ParcialAlgo3Tests'!!TestMotoneta methodsFor: 'tests' stamp: '100901 6/30/2020 19:54'!test01MotonetaAvanza80kmEnDosHs	| unaMotoneta resultado|	"Arrange"	unaMotoneta := VehiculoTerrestre crearMotoneta.		"Act"	resultado := unaMotoneta cantidadKmAlAvanzarHoras: 2.		"Assert"	self assert: resultado equals: 80.! !!TestMotoneta methodsFor: 'tests' stamp: '100901 6/30/2020 19:56'!test02MotonetaSeRompeDeberiaLanzarExcepcionDeVehiculoAveriadoNoAvanzaAlQuererAvanzar	|motoneta|	"Arrange"	motoneta := VehiculoTerrestre crearMotoneta.		"Act"	motoneta romperVehiculo.		"Assert"	self should: [ motoneta cantidadKmAlAvanzarHoras: 2 ] raise: VehiculoAveriadoNoPuedeAvanzarError.! !TestCase subclass: #TestNegativo	instanceVariableNames: ''	classVariableNames: ''	package: 'ParcialAlgo3Tests'!!TestNegativo methodsFor: 'tests' stamp: '100901 6/30/2020 20:24'!test01SeQuiereCalcularLaCantidadDeKMRecorridosPorUnTipoNoValidoDeberiaLanzarExcepcion	|vehiculo|	"Arrange"	vehiculo := VehiculoTerrestre new.		"Act & Assert"	self should: [ vehiculo cantidadKmAlAvanzarHoras: 2 ] raise: TipoDeVehiculoInexistenteError.! !